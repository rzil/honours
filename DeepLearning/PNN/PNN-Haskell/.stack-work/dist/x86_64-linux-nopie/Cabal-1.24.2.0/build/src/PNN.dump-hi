
==================== FINAL INTERFACE ====================
2017-11-26 06:24:39.811893725 UTC

interface PNN-Haskell-0.1.0.0-1Rk6QNiCN7LFQy8c5gZ6at:PNN 8002
  interface hash: 562c1f9cdbbc1ba017e0a71cb8fb0dc7
  ABI hash: 62a4386ff8f749c4ab46247c4da614c4
  export-list hash: 897efffc64752e8385a5b9c5efae3937
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  PNN.*:
  PNN.=+=
  PNN.=-=
  PNN.as
  PNN.complexes
  PNN.err
  PNN.fromVectors
  PNN.guesses
  PNN.k
  PNN.m
  PNN.makeComplex
  PNN.mat_a
  PNN.mat_a_gen
  PNN.n
  PNN.norm1
  PNN.s
  PNN.sd
  PNN.seed
  PNN.solve
  PNN.someFunc
  PNN.w_in
  PNN.w_out
  PNN.w_res
  PNN.x_res
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 loop-0.3.0@loop-0.3.0-4tGn4RSY02pFTwJ5L4CYRr
                      matrix-0.3.5.0@matrix-0.3.5.0-JvohPyGMusrL7Y0WxYUz8w
                      normaldistribution-1.1.0.3@normaldistribution-1.1.0.3-4jyWUv84QRECyZXMs5GJFb
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
import  -/  base-4.9.1.0:Data.Complex ec864ed8b68bbdf9c6cffa700c3cfe8e
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Float 33e2b9ffe427edd6a5c2fd6a3b26703c
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  matrix-0.3.5.0@matrix-0.3.5.0-JvohPyGMusrL7Y0WxYUz8w:Data.Matrix ae8095010fe45e3f959949e07cc86584
import  -/  normaldistribution-1.1.0.3@normaldistribution-1.1.0.3-4jyWUv84QRECyZXMs5GJFb:Data.Random.Normal e29d88b1ded58a3e38c82603f20c9dc7
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector 6714bbd22aa495e7dd4cf02a1891a465
cb6425777e948ec5fe01fc4bbb826586
  $smaximum1 :: GHC.Types.Double
  {- Strictness: x -}
b312c3d8426ea517b3968934ecc76155
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module PNN.$trModule2 PNN.$trModule1) -}
550726993aacd2677ad94abd69161e28
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PNN"#) -}
eb7c0fbf136dc9d44d1f91b61183d5d1
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "PNN-Haskell-0.1.0.0-1Rk6QNiCN7LFQy8c5gZ6at"#) -}
19ec9820af41b9a0a72923b8d490e62c
  $w$s*: ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Complex.Complex GHC.Types.Double)
    -> Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
  {- Arity: 9,
     Strictness: <S,U><S,U><L,U><L,U><L,U><L,U(U,A,U)><L,U><S,U><L,U>,
     Inline: [0] -}
0a3534e759af7cff178f94a139d2c922
  $w$s=+= ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Complex.Complex GHC.Types.Double)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Complex.Complex GHC.Types.Double)
    -> Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
  {- Arity: 6, Strictness: <L,U><S,U><L,U><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# (Data.Complex.Complex GHC.Types.Double))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# (Data.Complex.Complex GHC.Types.Double)) ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           $j :: GHC.Prim.Int#
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double) #)
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.newArray#
                                    @ (Data.Complex.Complex GHC.Types.Double)
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    n#
                                    (Data.Vector.Mutable.uninitialised
                                       @ (Data.Complex.Complex GHC.Types.Double))
                                    s1
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                             letrec {
                               $wfoldlM'_loop :: GHC.Types.SPEC
                                                 -> GHC.Prim.Int#
                                                 -> GHC.Types.Int
                                                 -> GHC.Types.Int
                                                 -> GHC.Base.Maybe
                                                      (Data.Complex.Complex GHC.Types.Double)
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Types.Int #)
                                 {- Arity: 6,
                                    Strictness: <S,1*U><L,U><L,1*U(U)><L,1*U(U)><S,1*U><S,U>,
                                    Inline: [0] -}
                               = \ (w :: GHC.Types.SPEC)
                                   (ww6 :: GHC.Prim.Int#)
                                   (ww7 :: GHC.Types.Int)
                                   (ww8 :: GHC.Types.Int)
                                   (ww9 :: GHC.Base.Maybe (Data.Complex.Complex GHC.Types.Double))
                                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case w of ds5 { DEFAULT ->
                                 case ww9 of wild5 {
                                   GHC.Base.Nothing
                                   -> case ww7 of wild { GHC.Types.I# x ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.>=# x ww1) of wild1 {
                                        GHC.Types.False
                                        -> case GHC.Prim.indexArray#
                                                  @ (Data.Complex.Complex GHC.Types.Double)
                                                  ww2
                                                  (GHC.Prim.+# ww x) of ds2 { Unit# ipv2 ->
                                           $wfoldlM'_loop
                                             GHC.Types.SPEC
                                             ww6
                                             (GHC.Types.I# (GHC.Prim.+# x 1#))
                                             ww8
                                             (GHC.Base.Just
                                                @ (Data.Complex.Complex GHC.Types.Double)
                                                ipv2)
                                             w1 }
                                        GHC.Types.True -> (# w1, GHC.Types.I# ww6 #) } }
                                   GHC.Base.Just x
                                   -> case ww8 of wild { GHC.Types.I# x1 ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.>=# x1 ww4) of wild1 {
                                        GHC.Types.False
                                        -> case GHC.Prim.indexArray#
                                                  @ (Data.Complex.Complex GHC.Types.Double)
                                                  ww5
                                                  (GHC.Prim.+# ww3 x1) of ds2 { Unit# ipv2 ->
                                           case GHC.Prim.writeArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  @ (Data.Complex.Complex GHC.Types.Double)
                                                  ipv1
                                                  ww6
                                                  (case x of ww10 { Data.Complex.:+ ww11 ww12 ->
                                                   case ww11 of ww13 { GHC.Types.D# ww14 ->
                                                   case ww12 of ww15 { GHC.Types.D# ww16 ->
                                                   case ipv2 of ww17 { Data.Complex.:+ ww18 ww19 ->
                                                   case ww18 of ww20 { GHC.Types.D# ww21 ->
                                                   case ww19 of ww22 { GHC.Types.D# ww23 ->
                                                   Data.Complex.:+
                                                     @ GHC.Types.Double
                                                     (GHC.Types.D# (GHC.Prim.+## ww14 ww21))
                                                     (GHC.Types.D#
                                                        (GHC.Prim.+## ww16 ww23)) } } } } } })
                                                  w1
                                                    `cast`
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                           $wfoldlM'_loop
                                             GHC.Types.SPEC
                                             (GHC.Prim.+# ww6 1#)
                                             ww7
                                             (GHC.Types.I# (GHC.Prim.+# x1 1#))
                                             (GHC.Base.Nothing
                                                @ (Data.Complex.Complex GHC.Types.Double))
                                             s'#
                                               `cast`
                                             (GHC.Prim.State#
                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                     <GHC.Prim.RealWorld>_N))_R } }
                                        GHC.Types.True -> (# w1, GHC.Types.I# ww6 #) } } } }
                             } in
                             case $wfoldlM'_loop
                                    GHC.Types.SPEC
                                    0#
                                    PNN.=+=1
                                    PNN.=+=1
                                    (GHC.Base.Nothing @ (Data.Complex.Complex GHC.Types.Double))
                                    ipv
                                      `cast`
                                    (GHC.Prim.State#
                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                            <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                             case ipv7 of dt5 { GHC.Types.I# dt6 ->
                             case GHC.Prim.unsafeFreezeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ (Data.Complex.Complex GHC.Types.Double)
                                    ipv1
                                    ipv6
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                             (# ipv2
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R,
                                Data.Vector.Vector
                                  @ (Data.Complex.Complex GHC.Types.Double)
                                  0#
                                  dt6
                                  ipv3 #) } } } }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=# ww1 ww4) of wild2 {
                           GHC.Types.False -> $j ww4
                           GHC.Types.True -> $j ww1 }) of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
f6d8cd5881b2bb83f78a4a66d7f2c081
  $w$s=-= ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Complex.Complex GHC.Types.Double)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Data.Complex.Complex GHC.Types.Double)
    -> Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
  {- Arity: 6, Strictness: <L,U><S,U><L,U><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# (Data.Complex.Complex GHC.Types.Double))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# (Data.Complex.Complex GHC.Types.Double)) ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           $j :: GHC.Prim.Int#
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double) #)
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.newArray#
                                    @ (Data.Complex.Complex GHC.Types.Double)
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    n#
                                    (Data.Vector.Mutable.uninitialised
                                       @ (Data.Complex.Complex GHC.Types.Double))
                                    s1
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                             letrec {
                               $wfoldlM'_loop :: GHC.Types.SPEC
                                                 -> GHC.Prim.Int#
                                                 -> GHC.Types.Int
                                                 -> GHC.Types.Int
                                                 -> GHC.Base.Maybe
                                                      (Data.Complex.Complex GHC.Types.Double)
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Types.Int #)
                                 {- Arity: 6,
                                    Strictness: <S,1*U><L,U><L,1*U(U)><L,1*U(U)><S,1*U><S,U>,
                                    Inline: [0] -}
                               = \ (w :: GHC.Types.SPEC)
                                   (ww6 :: GHC.Prim.Int#)
                                   (ww7 :: GHC.Types.Int)
                                   (ww8 :: GHC.Types.Int)
                                   (ww9 :: GHC.Base.Maybe (Data.Complex.Complex GHC.Types.Double))
                                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case w of ds5 { DEFAULT ->
                                 case ww9 of wild5 {
                                   GHC.Base.Nothing
                                   -> case ww7 of wild { GHC.Types.I# x ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.>=# x ww1) of wild1 {
                                        GHC.Types.False
                                        -> case GHC.Prim.indexArray#
                                                  @ (Data.Complex.Complex GHC.Types.Double)
                                                  ww2
                                                  (GHC.Prim.+# ww x) of ds2 { Unit# ipv2 ->
                                           $wfoldlM'_loop
                                             GHC.Types.SPEC
                                             ww6
                                             (GHC.Types.I# (GHC.Prim.+# x 1#))
                                             ww8
                                             (GHC.Base.Just
                                                @ (Data.Complex.Complex GHC.Types.Double)
                                                ipv2)
                                             w1 }
                                        GHC.Types.True -> (# w1, GHC.Types.I# ww6 #) } }
                                   GHC.Base.Just x
                                   -> case ww8 of wild { GHC.Types.I# x1 ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.>=# x1 ww4) of wild1 {
                                        GHC.Types.False
                                        -> case GHC.Prim.indexArray#
                                                  @ (Data.Complex.Complex GHC.Types.Double)
                                                  ww5
                                                  (GHC.Prim.+# ww3 x1) of ds2 { Unit# ipv2 ->
                                           case GHC.Prim.writeArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  @ (Data.Complex.Complex GHC.Types.Double)
                                                  ipv1
                                                  ww6
                                                  (case x of ww10 { Data.Complex.:+ ww11 ww12 ->
                                                   case ww11 of ww13 { GHC.Types.D# ww14 ->
                                                   case ww12 of ww15 { GHC.Types.D# ww16 ->
                                                   case ipv2 of ww17 { Data.Complex.:+ ww18 ww19 ->
                                                   case ww18 of ww20 { GHC.Types.D# ww21 ->
                                                   case ww19 of ww22 { GHC.Types.D# ww23 ->
                                                   Data.Complex.:+
                                                     @ GHC.Types.Double
                                                     (GHC.Types.D# (GHC.Prim.-## ww14 ww21))
                                                     (GHC.Types.D#
                                                        (GHC.Prim.-## ww16 ww23)) } } } } } })
                                                  w1
                                                    `cast`
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                           $wfoldlM'_loop
                                             GHC.Types.SPEC
                                             (GHC.Prim.+# ww6 1#)
                                             ww7
                                             (GHC.Types.I# (GHC.Prim.+# x1 1#))
                                             (GHC.Base.Nothing
                                                @ (Data.Complex.Complex GHC.Types.Double))
                                             s'#
                                               `cast`
                                             (GHC.Prim.State#
                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                     <GHC.Prim.RealWorld>_N))_R } }
                                        GHC.Types.True -> (# w1, GHC.Types.I# ww6 #) } } } }
                             } in
                             case $wfoldlM'_loop
                                    GHC.Types.SPEC
                                    0#
                                    PNN.=+=1
                                    PNN.=+=1
                                    (GHC.Base.Nothing @ (Data.Complex.Complex GHC.Types.Double))
                                    ipv
                                      `cast`
                                    (GHC.Prim.State#
                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                            <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                             case ipv7 of dt5 { GHC.Types.I# dt6 ->
                             case GHC.Prim.unsafeFreezeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ (Data.Complex.Complex GHC.Types.Double)
                                    ipv1
                                    ipv6
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                             (# ipv2
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R,
                                Data.Vector.Vector
                                  @ (Data.Complex.Complex GHC.Types.Double)
                                  0#
                                  dt6
                                  ipv3 #) } } } }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=# ww1 ww4) of wild2 {
                           GHC.Types.False -> $j ww4
                           GHC.Types.True -> $j ww1 }) of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
5b52e07f6ff626ca39d04c7acc427ede
  $w$snorm1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
    -> GHC.Prim.Double#
  {- Arity: 6, Strictness: <L,U><S,U><L,U><L,U><L,U><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: Data.Vector.Vector
                             (Data.Complex.Complex GHC.Types.Double)) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 1# ww1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go2 :: GHC.Prim.Int# -> [GHC.Types.Double]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ GHC.Types.Double
                            (letrec {
                               $wfoldlM'_loop :: GHC.Types.SPEC
                                                 -> GHC.Prim.Double#
                                                 -> GHC.Prim.Int#
                                                 -> GHC.Prim.Double#
                                 {- Arity: 3, Strictness: <S,1*U><L,U><S,U>, Inline: [0] -}
                               = \ (w :: GHC.Types.SPEC)
                                   (ww6 :: GHC.Prim.Double#)
                                   (ww7 :: GHC.Prim.Int#) ->
                                 case w of ds5 { DEFAULT ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.<# ww7 ww) of wild2 {
                                   GHC.Types.False -> ww6
                                   GHC.Types.True
                                   -> let {
                                        x1 :: GHC.Prim.Int#
                                        = GHC.Prim.-#
                                            (GHC.Prim.+#
                                               (GHC.Prim.*#
                                                  (GHC.Prim.-#
                                                     (GHC.Prim.+# (GHC.Prim.+# ww7 1#) ww2)
                                                     1#)
                                                  ww4)
                                               (GHC.Prim.+# x ww3))
                                            1#
                                      } in
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.>=# x1 0#) of wild1 {
                                        GHC.Types.False
                                        -> case ww5 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                           case PNN.err1 ipv1 x1 ret_ty GHC.Prim.Double# of {} }
                                        GHC.Types.True
                                        -> case ww5 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                           case GHC.Prim.tagToEnum#
                                                  @ GHC.Types.Bool
                                                  (GHC.Prim.<# x1 ipv1) of wild3 {
                                             GHC.Types.False
                                             -> case PNN.err1 ipv1 x1 ret_ty GHC.Prim.Double# of {}
                                             GHC.Types.True
                                             -> case GHC.Prim.indexArray#
                                                       @ (Data.Complex.Complex GHC.Types.Double)
                                                       ipv2
                                                       (GHC.Prim.+# ipv x1) of ds1 { Unit# ipv3 ->
                                                case ipv3 of ww8 { Data.Complex.:+ ww9 ww10 ->
                                                case ww9 of ww11 { GHC.Types.D# ww12 ->
                                                case ww10 of ww13 { GHC.Types.D# ww14 ->
                                                case Data.Complex.$w$smagnitude
                                                       ww12
                                                       ww14 of ww15 { DEFAULT ->
                                                $wfoldlM'_loop
                                                  GHC.Types.SPEC
                                                  (GHC.Prim.+## ww6 ww15)
                                                  (GHC.Prim.+# ww7 1#) } } } } } } } } } }
                             } in
                             case $wfoldlM'_loop GHC.Types.SPEC 0.0## 0# of ww6 { DEFAULT ->
                             GHC.Types.D# ww6 })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x ww1) of wild1 {
                               GHC.Types.False -> go2 (GHC.Prim.+# x 1#)
                               GHC.Types.True -> GHC.Types.[] @ GHC.Types.Double })
                      } in
                      case go2 1# of wild1 {
                        [] -> case PNN.$smaximum1 ret_ty GHC.Prim.Double# of {}
                        : ipv ipv1
                        -> case ipv of ww6 { GHC.Types.D# ww7 -> PNN.$wgo1 ipv1 ww7 } }
                   GHC.Types.True
                   -> case PNN.$smaximum1 ret_ty GHC.Prim.Double# of {} }) -}
554ae148d724b493ebf9a42e03b02a32
  $w*: ::
    GHC.Num.Num a =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector a
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# a
    -> Data.Vector.Vector a
  {- Arity: 10,
     Strictness: <L,U(U,A,C(C1(U)),A,A,A,C(U))><S,U><S,U><L,U><L,U><L,U><L,U(U,A,U)><L,U><S,U><L,U>,
     Inline: [0] -}
2105297147e064ddf7cdc658b41cba9e
  $w=+= ::
    GHC.Num.Num c =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# c
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# c
    -> Data.Vector.Vector c
  {- Arity: 7,
     Strictness: <L,1*U(1*U,A,A,A,A,A,A)><L,U><S,U><L,U><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ c
                   (w :: GHC.Num.Num c)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# c)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# c) ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector c)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           $j :: GHC.Prim.Int#
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector c #)
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.newArray#
                                    @ c
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    n#
                                    (Data.Vector.Mutable.uninitialised @ c)
                                    s1
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                             let {
                               f :: c -> c -> c = GHC.Num.+ @ c w
                             } in
                             letrec {
                               $wfoldlM'_loop :: GHC.Types.SPEC
                                                 -> GHC.Prim.Int#
                                                 -> GHC.Types.Int
                                                 -> GHC.Types.Int
                                                 -> GHC.Base.Maybe c
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Types.Int #)
                                 {- Arity: 6,
                                    Strictness: <S,1*U><L,U><L,1*U(U)><L,1*U(U)><S,1*U><S,U>,
                                    Inline: [0] -}
                               = \ (w1 :: GHC.Types.SPEC)
                                   (ww6 :: GHC.Prim.Int#)
                                   (ww7 :: GHC.Types.Int)
                                   (ww8 :: GHC.Types.Int)
                                   (ww9 :: GHC.Base.Maybe c)
                                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case w1 of ds5 { DEFAULT ->
                                 case ww9 of wild5 {
                                   GHC.Base.Nothing
                                   -> case ww7 of wild { GHC.Types.I# x ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.>=# x ww1) of wild1 {
                                        GHC.Types.False
                                        -> case GHC.Prim.indexArray#
                                                  @ c
                                                  ww2
                                                  (GHC.Prim.+# ww x) of ds2 { Unit# ipv2 ->
                                           $wfoldlM'_loop
                                             GHC.Types.SPEC
                                             ww6
                                             (GHC.Types.I# (GHC.Prim.+# x 1#))
                                             ww8
                                             (GHC.Base.Just @ c ipv2)
                                             w2 }
                                        GHC.Types.True -> (# w2, GHC.Types.I# ww6 #) } }
                                   GHC.Base.Just x
                                   -> case ww8 of wild { GHC.Types.I# x1 ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.>=# x1 ww4) of wild1 {
                                        GHC.Types.False
                                        -> case GHC.Prim.writeArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  @ c
                                                  ipv1
                                                  ww6
                                                  (case GHC.Prim.indexArray#
                                                          @ c
                                                          ww5
                                                          (GHC.Prim.+#
                                                             ww3
                                                             x1) of ds2 { Unit# ipv2 ->
                                                   f x ipv2 })
                                                  w2
                                                    `cast`
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                           $wfoldlM'_loop
                                             GHC.Types.SPEC
                                             (GHC.Prim.+# ww6 1#)
                                             ww7
                                             (GHC.Types.I# (GHC.Prim.+# x1 1#))
                                             (GHC.Base.Nothing @ c)
                                             s'#
                                               `cast`
                                             (GHC.Prim.State#
                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                     <GHC.Prim.RealWorld>_N))_R }
                                        GHC.Types.True -> (# w2, GHC.Types.I# ww6 #) } } } }
                             } in
                             case $wfoldlM'_loop
                                    GHC.Types.SPEC
                                    0#
                                    PNN.=+=1
                                    PNN.=+=1
                                    (GHC.Base.Nothing @ c)
                                    ipv
                                      `cast`
                                    (GHC.Prim.State#
                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                            <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                             case ipv7 of dt5 { GHC.Types.I# dt6 ->
                             case GHC.Prim.unsafeFreezeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ c
                                    ipv1
                                    ipv6
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                             (# ipv2
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R,
                                Data.Vector.Vector @ c 0# dt6 ipv3 #) } } } }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=# ww1 ww4) of wild2 {
                           GHC.Types.False -> $j ww4
                           GHC.Types.True -> $j ww1 }) of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
bb30e2aab0063431b49e94cfa8e76876
  $w=-= ::
    GHC.Num.Num c =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# c
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# c
    -> Data.Vector.Vector c
  {- Arity: 7,
     Strictness: <L,1*U(A,1*U,A,A,A,A,A)><L,U><S,U><L,U><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ c
                   (w :: GHC.Num.Num c)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# c)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# c) ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector c)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           $j :: GHC.Prim.Int#
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector c #)
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.newArray#
                                    @ c
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    n#
                                    (Data.Vector.Mutable.uninitialised @ c)
                                    s1
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                             let {
                               f :: c -> c -> c = GHC.Num.- @ c w
                             } in
                             letrec {
                               $wfoldlM'_loop :: GHC.Types.SPEC
                                                 -> GHC.Prim.Int#
                                                 -> GHC.Types.Int
                                                 -> GHC.Types.Int
                                                 -> GHC.Base.Maybe c
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Types.Int #)
                                 {- Arity: 6,
                                    Strictness: <S,1*U><L,U><L,1*U(U)><L,1*U(U)><S,1*U><S,U>,
                                    Inline: [0] -}
                               = \ (w1 :: GHC.Types.SPEC)
                                   (ww6 :: GHC.Prim.Int#)
                                   (ww7 :: GHC.Types.Int)
                                   (ww8 :: GHC.Types.Int)
                                   (ww9 :: GHC.Base.Maybe c)
                                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case w1 of ds5 { DEFAULT ->
                                 case ww9 of wild5 {
                                   GHC.Base.Nothing
                                   -> case ww7 of wild { GHC.Types.I# x ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.>=# x ww1) of wild1 {
                                        GHC.Types.False
                                        -> case GHC.Prim.indexArray#
                                                  @ c
                                                  ww2
                                                  (GHC.Prim.+# ww x) of ds2 { Unit# ipv2 ->
                                           $wfoldlM'_loop
                                             GHC.Types.SPEC
                                             ww6
                                             (GHC.Types.I# (GHC.Prim.+# x 1#))
                                             ww8
                                             (GHC.Base.Just @ c ipv2)
                                             w2 }
                                        GHC.Types.True -> (# w2, GHC.Types.I# ww6 #) } }
                                   GHC.Base.Just x
                                   -> case ww8 of wild { GHC.Types.I# x1 ->
                                      case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.>=# x1 ww4) of wild1 {
                                        GHC.Types.False
                                        -> case GHC.Prim.writeArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  @ c
                                                  ipv1
                                                  ww6
                                                  (case GHC.Prim.indexArray#
                                                          @ c
                                                          ww5
                                                          (GHC.Prim.+#
                                                             ww3
                                                             x1) of ds2 { Unit# ipv2 ->
                                                   f x ipv2 })
                                                  w2
                                                    `cast`
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                           $wfoldlM'_loop
                                             GHC.Types.SPEC
                                             (GHC.Prim.+# ww6 1#)
                                             ww7
                                             (GHC.Types.I# (GHC.Prim.+# x1 1#))
                                             (GHC.Base.Nothing @ c)
                                             s'#
                                               `cast`
                                             (GHC.Prim.State#
                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                     <GHC.Prim.RealWorld>_N))_R }
                                        GHC.Types.True -> (# w2, GHC.Types.I# ww6 #) } } } }
                             } in
                             case $wfoldlM'_loop
                                    GHC.Types.SPEC
                                    0#
                                    PNN.=+=1
                                    PNN.=+=1
                                    (GHC.Base.Nothing @ c)
                                    ipv
                                      `cast`
                                    (GHC.Prim.State#
                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                            <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                             case ipv7 of dt5 { GHC.Types.I# dt6 ->
                             case GHC.Prim.unsafeFreezeArray#
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ c
                                    ipv1
                                    ipv6
                                      `cast`
                                    (GHC.Prim.State#
                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                             (# ipv2
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R,
                                Data.Vector.Vector @ c 0# dt6 ipv3 #) } } } }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=# ww1 ww4) of wild2 {
                           GHC.Types.False -> $j ww4
                           GHC.Types.True -> $j ww1 }) of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
1511a302dcc531ebb54c6c98ed54ba17
  $wfromVectors ::
    [Data.Vector.Vector a]
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Int#, Data.Vector.Vector a #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ a (w :: [Data.Vector.Vector a]) ->
                 case GHC.Base.map
                        @ (Data.Vector.Vector a)
                        @ [a]
                        (Data.Vector.toList @ a)
                        w of wild {
                   []
                   -> case PNN.err4
                      ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#,
                                GHC.Prim.Int#, GHC.Prim.Int#, Data.Vector.Vector a #)
                      of {}
                   : xs xss
                   -> case GHC.List.$wlenAcc @ [a] xss 0# of ww2 { DEFAULT ->
                      case GHC.List.$wlenAcc @ a xs 0# of ww1 { DEFAULT ->
                      let {
                        dt1 :: GHC.Prim.Int# = GHC.Prim.+# 1# ww2
                      } in
                      (# dt1, ww1, 0#, 0#, ww1,
                         case GHC.Magic.runRW#
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.Vector.Vector a)
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 let {
                                   n1 :: GHC.Prim.Int# = GHC.Prim.*# dt1 ww1
                                 } in
                                 let {
                                   $j :: GHC.Prim.Int#
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               Data.Vector.Vector a #)
                                     {- Arity: 1, Strictness: <S,U> -}
                                   = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                     case GHC.Prim.newArray#
                                            @ a
                                            @ (Control.Monad.Primitive.PrimState
                                                 (GHC.ST.ST GHC.Prim.RealWorld))
                                            n#
                                            (Data.Vector.Mutable.uninitialised @ a)
                                            s1
                                              `cast`
                                            (GHC.Prim.State#
                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                                     letrec {
                                       $wfoldlM'_loop :: GHC.Types.SPEC
                                                         -> GHC.Prim.Int#
                                                         -> [a]
                                                         -> GHC.Prim.Int#
                                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               GHC.Types.Int #)
                                         {- Arity: 5, Strictness: <S,1*U><L,U><L,1*U><S,U><S,U>,
                                            Inline: [0] -}
                                       = \ (w1 :: GHC.Types.SPEC)
                                           (ww :: GHC.Prim.Int#)
                                           (ww3 :: [a])
                                           (ww4 :: GHC.Prim.Int#)
                                           (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case w1 of ds5 { DEFAULT ->
                                         case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.<=# ww4 0#) of wild1 {
                                           GHC.Types.False
                                           -> case ww3 of wild2 {
                                                [] -> (# w2, GHC.Types.I# ww #)
                                                : x xs1
                                                -> case GHC.Prim.writeArray#
                                                          @ (Control.Monad.Primitive.PrimState
                                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                                          @ a
                                                          ipv1
                                                          ww
                                                          x
                                                          w2
                                                            `cast`
                                                          (GHC.Prim.State#
                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                       <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                                   $wfoldlM'_loop
                                                     GHC.Types.SPEC
                                                     (GHC.Prim.+# ww 1#)
                                                     xs1
                                                     (GHC.Prim.-# ww4 1#)
                                                     s'#
                                                       `cast`
                                                     (GHC.Prim.State#
                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                             <GHC.Prim.RealWorld>_N))_R } }
                                           GHC.Types.True -> (# w2, GHC.Types.I# ww #) } }
                                     } in
                                     case $wfoldlM'_loop
                                            GHC.Types.SPEC
                                            0#
                                            (GHC.Base.++
                                               @ a
                                               xs
                                               (let {
                                                  lvl81 :: GHC.Types.Bool
                                                  = GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<# 0# ww1)
                                                } in
                                                letrec {
                                                  go2 :: [[a]] -> [a]
                                                    {- Arity: 1, Strictness: <S,1*U> -}
                                                  = \ (ds :: [[a]]) ->
                                                    case ds of wild1 {
                                                      [] -> GHC.Types.[] @ a
                                                      : y ys
                                                      -> case lvl81 of wild2 {
                                                           GHC.Types.False
                                                           -> GHC.Base.++
                                                                @ a
                                                                (GHC.Types.[] @ a)
                                                                (go2 ys)
                                                           GHC.Types.True
                                                           -> GHC.Base.++
                                                                @ a
                                                                (GHC.List.$wunsafeTake @ a ww1 y)
                                                                (go2 ys) } }
                                                } in
                                                go2 xss))
                                            n1
                                            ipv
                                              `cast`
                                            (GHC.Prim.State#
                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                                     case ipv7 of dt5 { GHC.Types.I# dt6 ->
                                     case GHC.Prim.unsafeFreezeArray#
                                            @ (Control.Monad.Primitive.PrimState
                                                 (GHC.ST.ST GHC.Prim.RealWorld))
                                            @ a
                                            ipv1
                                            ipv6
                                              `cast`
                                            (GHC.Prim.State#
                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                         <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                                     (# ipv2
                                          `cast`
                                        (GHC.Prim.State#
                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                <GHC.Prim.RealWorld>_N))_R,
                                        Data.Vector.Vector @ a 0# dt6 ipv3 #) } } } }
                                 } in
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.<=# n1 0#) of wild2 {
                                   GHC.Types.False -> $j n1
                                   GHC.Types.True -> $j 0# }) of ds1 { (#,#) ipv1 ipv2 ->
                         ipv2 } #) } } }) -}
6215708765dbbb2a6c7070ce68ee9978
  $wgo1 :: [GHC.Types.Double] -> GHC.Prim.Double# -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
7d41b4a2cfcc57956583d51be1ddd82c
  $wgo2 ::
    Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
    -> (# Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double),
          [Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)] #)
  {- Arity: 1, Strictness: <L,U(U,U,U)>, Inline: [0] -}
9bf7cc9d9b07a90fb13888f80ababca1
  $wgo3 ::
    [(GHC.Integer.Type.Integer,
      Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))]
    -> GHC.Prim.Int#
    -> [Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: [0] -}
a99db84dbddebe73902d37df28c6fe71
  $wmakeComplex ::
    [a] -> (# Data.Complex.Complex a, [Data.Complex.Complex a] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
21b7676411bdf16b95672eeec7877e84
  $wnorm1 ::
    GHC.Float.RealFloat a =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector (Data.Complex.Complex a)
    -> a
  {- Arity: 7,
     Strictness: <L,U(U(U(U(U,U,U,U,U,U,U),U,U),U,U,U,U,U,U),U(A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A,A,C(U(U)),A,C(C1(U)),A,A,A,A,A,A)><L,U><S,U><L,U><L,U><L,U><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Float.RealFloat a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: Data.Vector.Vector (Data.Complex.Complex a)) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 1# ww1) of wild {
                   GHC.Types.False
                   -> let {
                        $dRealFrac :: GHC.Real.RealFrac a = GHC.Float.$p1RealFloat @ a w
                      } in
                      let {
                        $dReal :: GHC.Real.Real a = GHC.Real.$p1RealFrac @ a $dRealFrac
                      } in
                      let {
                        $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                      } in
                      let {
                        lvl81 :: a = GHC.Num.fromInteger @ a $dNum PNN.guesses6
                      } in
                      let {
                        f :: a -> a -> a = GHC.Num.+ @ a $dNum
                      } in
                      letrec {
                        go2 :: GHC.Prim.Int# -> [a] {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ a
                            (letrec {
                               $wfoldlM'_loop :: GHC.Types.SPEC
                                                 -> a
                                                 -> GHC.Prim.Int#
                                                 -> Data.Vector.Fusion.Util.Id a
                                 {- Arity: 3, Strictness: <S,1*U><S,1*U><S,U>, Inline: [0] -}
                               = \ (w1 :: GHC.Types.SPEC) (w2 :: a) (ww6 :: GHC.Prim.Int#) ->
                                 case w1 of ds5 { DEFAULT ->
                                 case w2 of z2 { DEFAULT ->
                                 case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.<# ww6 ww) of wild2 {
                                   GHC.Types.False
                                   -> z2 `cast` (Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                                   GHC.Types.True
                                   -> $wfoldlM'_loop
                                        GHC.Types.SPEC
                                        (f z2
                                           (let {
                                              x1 :: GHC.Prim.Int#
                                              = GHC.Prim.-#
                                                  (GHC.Prim.+#
                                                     (GHC.Prim.*#
                                                        (GHC.Prim.-#
                                                           (GHC.Prim.+# (GHC.Prim.+# ww6 1#) ww2)
                                                           1#)
                                                        ww4)
                                                     (GHC.Prim.+# x ww3))
                                                  1#
                                            } in
                                            case GHC.Prim.tagToEnum#
                                                   @ GHC.Types.Bool
                                                   (GHC.Prim.>=# x1 0#) of wild1 {
                                              GHC.Types.False
                                              -> case ww5 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                 case PNN.norm3 @ a ipv1 x1 ret_ty a of {} }
                                              GHC.Types.True
                                              -> case ww5 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                 case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        (GHC.Prim.<# x1 ipv1) of wild3 {
                                                   GHC.Types.False
                                                   -> case PNN.norm3 @ a ipv1 x1 ret_ty a of {}
                                                   GHC.Types.True
                                                   -> case GHC.Prim.indexArray#
                                                             @ (Data.Complex.Complex a)
                                                             ipv2
                                                             (GHC.Prim.+#
                                                                ipv
                                                                x1) of ds1 { Unit# ipv3 ->
                                                      case ipv3 of ww7 { Data.Complex.:+ ww8 ww9 ->
                                                      case Data.Complex.$w$cabs
                                                             @ a
                                                             w
                                                             ww8
                                                             ww9 of ww10 { (#,#) ww11 ww12 ->
                                                      ww11 } } } } } }))
                                        (GHC.Prim.+# ww6 1#) } } }
                             } in
                             ($wfoldlM'_loop GHC.Types.SPEC lvl81 0#)
                               `cast`
                             (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x ww1) of wild1 {
                               GHC.Types.False -> go2 (GHC.Prim.+# x 1#)
                               GHC.Types.True -> GHC.Types.[] @ a })
                      } in
                      GHC.List.maximum @ a (GHC.Real.$p2Real @ a $dReal) (go2 1#)
                   GHC.Types.True -> PNN.norm2 @ a }) -}
05526935038e82bc57a889f3bd80b0fa
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
2bcdb4c99f92859d135f202595f515fa
  $wunsafeDrop1 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
13e6c5019a6324e84cb1f25b282b70ac
  (*:) ::
    GHC.Num.Num a =>
    Data.Matrix.Matrix a
    -> Data.Vector.Vector a -> Data.Vector.Vector a
  {- Arity: 3,
     Strictness: <L,U(U,A,C(C1(U)),A,A,A,C(U))><S(SSLLLL),1*U(U,U,U,U,U,U(U,A,U))><S(LSL),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Data.Matrix.Matrix a)
                   (w2 :: Data.Vector.Vector a) ->
                 case w1 of ww { Data.Matrix.M ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w2 of ww7 { Data.Vector.Vector ww8 ww9 ww10 ->
                 PNN.$w*: @ a w ww1 ww2 ww3 ww4 ww5 ww6 ww8 ww9 ww10 } }) -}
b046c1ef685cc4fb1c0fbd776de140c1
  *:_$s*: ::
    Data.Matrix.Matrix (Data.Complex.Complex GHC.Types.Double)
    -> Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
    -> Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
  {- Arity: 2,
     Strictness: <S(SSLLLL),1*U(U,U,U,U,U,U(U,A,U))><S(LSL),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Matrix.Matrix
                           (Data.Complex.Complex GHC.Types.Double))
                   (w1 :: Data.Vector.Vector
                            (Data.Complex.Complex GHC.Types.Double)) ->
                 case w of ww { Data.Matrix.M ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of ww7 { Data.Vector.Vector ww8 ww9 ww10 ->
                 PNN.$w$s*: ww1 ww2 ww3 ww4 ww5 ww6 ww8 ww9 ww10 } }) -}
bde8dcefdec3eca95aa17eb38a355d3d
  (=+=) ::
    GHC.Num.Num c =>
    Data.Vector.Vector c
    -> Data.Vector.Vector c -> Data.Vector.Vector c
  {- Arity: 3,
     Strictness: <L,1*U(1*U,A,A,A,A,A,A)><S(LSL),1*U(U,U,U)><S(LSL),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ c
                   (w :: GHC.Num.Num c)
                   (w1 :: Data.Vector.Vector c)
                   (w2 :: Data.Vector.Vector c) ->
                 case w1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 PNN.$w=+= @ c w ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
7a9cb07f45628239fc85550c45ddab30
  =+=1 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
83358f178f35bdec5d11de5ddb04ebc2
  (=-=) ::
    GHC.Num.Num c =>
    Data.Vector.Vector c
    -> Data.Vector.Vector c -> Data.Vector.Vector c
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U,A,A,A,A,A)><S(LSL),1*U(U,U,U)><S(LSL),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ c
                   (w :: GHC.Num.Num c)
                   (w1 :: Data.Vector.Vector c)
                   (w2 :: Data.Vector.Vector c) ->
                 case w1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 PNN.$w=-= @ c w ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
675e087cb4afe905f88d628e4df65bc0
  as ::
    (GHC.Real.Integral t, GHC.Float.Floating a) =>
    t -> Data.Vector.Vector a
  {- Arity: 3,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,1*C1(U))><L,U(1*U,A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
a5b45738c90226c3113cde5729c169c7
  as1 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
          (Data.Complex.Complex GHC.Types.Double),
        GHC.Types.Int)
    -> [Data.Complex.Complex GHC.Types.Double]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             (Data.Complex.Complex GHC.Types.Double),
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><S,U> -}
0417a916bd891a3bce7b94038e36b634
  as2 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
          (Data.Complex.Complex GHC.Types.Double),
        GHC.Types.Int)
    -> [Data.Complex.Complex GHC.Types.Double]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             (Data.Complex.Complex GHC.Types.Double),
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><S,U> -}
05aef087066ef961a48067a5d9f021d5
  as_$sas ::
    GHC.Integer.Type.Integer
    -> Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (eta :: GHC.Integer.Type.Integer) ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ (Data.Complex.Complex GHC.Types.Double)
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ (Data.Complex.Complex GHC.Types.Double))
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                         let {
                           c' :: Data.Complex.Complex GHC.Types.Double
                           = case GHC.Integer.Type.doubleFromInteger eta of wild { DEFAULT ->
                             Data.Complex.:+
                               @ GHC.Types.Double
                               (GHC.Types.D# (GHC.Prim.*## 1.0e-2## wild))
                               (GHC.Types.D# (GHC.Prim.*## 0.0## wild)) }
                         } in
                         case PNN.as1
                                GHC.Types.SPEC
                                ((Data.Vector.Mutable.MVector
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ (Data.Complex.Complex GHC.Types.Double)
                                    0#
                                    0#
                                    ipv1)
                                   `cast`
                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)>_N <Data.Complex.Complex
                                                                                                               GHC.Types.Double>_N),
                                 PNN.=+=1)
                                (GHC.Types.:
                                   @ (Data.Complex.Complex GHC.Types.Double)
                                   (Data.Complex.$fFloatingComplex_$s$csin c')
                                   (GHC.Types.:
                                      @ (Data.Complex.Complex GHC.Types.Double)
                                      (case c' of ww7 { Data.Complex.:+ ww8 ww9 ->
                                       case ww8 of ww10 { GHC.Types.D# ww11 ->
                                       case ww9 of ww12 { GHC.Types.D# ww13 ->
                                       let {
                                         ww2 :: GHC.Prim.Double#
                                         = GHC.Prim.+##
                                             (GHC.Prim.+## ww13 ww13)
                                             (GHC.Prim.*## 0.0## ww11)
                                       } in
                                       let {
                                         x :: GHC.Prim.Double#
                                         = GHC.Prim.+##
                                             (GHC.Prim.-##
                                                (GHC.Prim.+## ww11 ww11)
                                                (GHC.Prim.*## 0.0## ww13))
                                             1.0##
                                       } in
                                       Data.Complex.:+
                                         @ GHC.Types.Double
                                         (GHC.Types.D#
                                            (GHC.Prim.*##
                                               (GHC.Prim.cosDouble# x)
                                               (GHC.Prim.coshDouble# ww2)))
                                         (GHC.Types.D#
                                            (GHC.Prim.negateDouble#
                                               (GHC.Prim.*##
                                                  (GHC.Prim.sinDouble# x)
                                                  (GHC.Prim.sinhDouble# ww2)))) } } })
                                      (GHC.Types.:
                                         @ (Data.Complex.Complex GHC.Types.Double)
                                         (case c' of ww { Data.Complex.:+ ww1 ww2 ->
                                          case ww1 of ww3 { GHC.Types.D# ww4 ->
                                          case ww2 of ww5 { GHC.Types.D# ww6 ->
                                          let {
                                            ww7 :: GHC.Prim.Double#
                                            = GHC.Prim.+##
                                                (GHC.Prim.*## 3.0## ww6)
                                                (GHC.Prim.*## 0.0## ww4)
                                          } in
                                          let {
                                            x :: GHC.Prim.Double#
                                            = GHC.Prim.+##
                                                (GHC.Prim.-##
                                                   (GHC.Prim.*## 3.0## ww4)
                                                   (GHC.Prim.*## 0.0## ww6))
                                                2.0##
                                          } in
                                          let {
                                            x1 :: GHC.Prim.Double# = GHC.Prim.+## ww4 1.0##
                                          } in
                                          let {
                                            ww8 :: GHC.Prim.Double#
                                            = GHC.Prim.*##
                                                (GHC.Prim.sinDouble# x1)
                                                (GHC.Prim.coshDouble# ww6)
                                          } in
                                          let {
                                            ww9 :: GHC.Prim.Double#
                                            = GHC.Prim.*##
                                                (GHC.Prim.cosDouble# x1)
                                                (GHC.Prim.sinhDouble# ww6)
                                          } in
                                          Data.Complex.:+
                                            @ GHC.Types.Double
                                            (GHC.Types.D#
                                               (GHC.Prim.-##
                                                  (GHC.Prim.-##
                                                     (GHC.Prim.*## 3.0## ww8)
                                                     (GHC.Prim.*## 0.0## ww9))
                                                  (GHC.Prim.*##
                                                     (GHC.Prim.cosDouble# x)
                                                     (GHC.Prim.coshDouble# ww7))))
                                            (GHC.Types.D#
                                               (GHC.Prim.-##
                                                  (GHC.Prim.+##
                                                     (GHC.Prim.*## 3.0## ww9)
                                                     (GHC.Prim.*## 0.0## ww8))
                                                  (GHC.Prim.negateDouble#
                                                     (GHC.Prim.*##
                                                        (GHC.Prim.sinDouble# x)
                                                        (GHC.Prim.sinhDouble# ww7))))) } } })
                                         (GHC.Types.[] @ (Data.Complex.Complex GHC.Types.Double)))))
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                         case ipv7 of wild5 { (,) v' n1 ->
                         case v'
                                `cast`
                              (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                         (GHC.ST.ST
                                                                            GHC.Prim.RealWorld)>_N <Data.Complex.Complex
                                                                                                      GHC.Types.Double>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                         case n1 of dt5 { GHC.Types.I# dt6 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ (Data.Complex.Complex GHC.Types.Double)
                                dt2
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                    <GHC.Prim.RealWorld>_N))_R,
                            Data.Vector.Vector
                              @ (Data.Complex.Complex GHC.Types.Double)
                              dt
                              dt6
                              ipv3 #) } } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
2180af4f3462ca8b48c600b5afb293a2
  as_$sas1 ::
    GHC.Types.Int
    -> Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (eta :: GHC.Types.Int) ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ (Data.Complex.Complex GHC.Types.Double)
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ (Data.Complex.Complex GHC.Types.Double))
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                         let {
                           c' :: Data.Complex.Complex GHC.Types.Double
                           = case eta of wild { GHC.Types.I# i ->
                             let {
                               ww8 :: GHC.Prim.Double# = GHC.Prim.int2Double# i
                             } in
                             Data.Complex.:+
                               @ GHC.Types.Double
                               (GHC.Types.D# (GHC.Prim.*## 1.0e-2## ww8))
                               (GHC.Types.D# (GHC.Prim.*## 0.0## ww8)) }
                         } in
                         case PNN.as2
                                GHC.Types.SPEC
                                ((Data.Vector.Mutable.MVector
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ (Data.Complex.Complex GHC.Types.Double)
                                    0#
                                    0#
                                    ipv1)
                                   `cast`
                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)>_N <Data.Complex.Complex
                                                                                                               GHC.Types.Double>_N),
                                 PNN.=+=1)
                                (GHC.Types.:
                                   @ (Data.Complex.Complex GHC.Types.Double)
                                   (Data.Complex.$fFloatingComplex_$s$csin c')
                                   (GHC.Types.:
                                      @ (Data.Complex.Complex GHC.Types.Double)
                                      (case c' of ww7 { Data.Complex.:+ ww8 ww9 ->
                                       case ww8 of ww10 { GHC.Types.D# ww11 ->
                                       case ww9 of ww12 { GHC.Types.D# ww13 ->
                                       let {
                                         ww2 :: GHC.Prim.Double#
                                         = GHC.Prim.+##
                                             (GHC.Prim.+## ww13 ww13)
                                             (GHC.Prim.*## 0.0## ww11)
                                       } in
                                       let {
                                         x :: GHC.Prim.Double#
                                         = GHC.Prim.+##
                                             (GHC.Prim.-##
                                                (GHC.Prim.+## ww11 ww11)
                                                (GHC.Prim.*## 0.0## ww13))
                                             1.0##
                                       } in
                                       Data.Complex.:+
                                         @ GHC.Types.Double
                                         (GHC.Types.D#
                                            (GHC.Prim.*##
                                               (GHC.Prim.cosDouble# x)
                                               (GHC.Prim.coshDouble# ww2)))
                                         (GHC.Types.D#
                                            (GHC.Prim.negateDouble#
                                               (GHC.Prim.*##
                                                  (GHC.Prim.sinDouble# x)
                                                  (GHC.Prim.sinhDouble# ww2)))) } } })
                                      (GHC.Types.:
                                         @ (Data.Complex.Complex GHC.Types.Double)
                                         (case c' of ww { Data.Complex.:+ ww1 ww2 ->
                                          case ww1 of ww3 { GHC.Types.D# ww4 ->
                                          case ww2 of ww5 { GHC.Types.D# ww6 ->
                                          let {
                                            ww7 :: GHC.Prim.Double#
                                            = GHC.Prim.+##
                                                (GHC.Prim.*## 3.0## ww6)
                                                (GHC.Prim.*## 0.0## ww4)
                                          } in
                                          let {
                                            x :: GHC.Prim.Double#
                                            = GHC.Prim.+##
                                                (GHC.Prim.-##
                                                   (GHC.Prim.*## 3.0## ww4)
                                                   (GHC.Prim.*## 0.0## ww6))
                                                2.0##
                                          } in
                                          let {
                                            x1 :: GHC.Prim.Double# = GHC.Prim.+## ww4 1.0##
                                          } in
                                          let {
                                            ww8 :: GHC.Prim.Double#
                                            = GHC.Prim.*##
                                                (GHC.Prim.sinDouble# x1)
                                                (GHC.Prim.coshDouble# ww6)
                                          } in
                                          let {
                                            ww9 :: GHC.Prim.Double#
                                            = GHC.Prim.*##
                                                (GHC.Prim.cosDouble# x1)
                                                (GHC.Prim.sinhDouble# ww6)
                                          } in
                                          Data.Complex.:+
                                            @ GHC.Types.Double
                                            (GHC.Types.D#
                                               (GHC.Prim.-##
                                                  (GHC.Prim.-##
                                                     (GHC.Prim.*## 3.0## ww8)
                                                     (GHC.Prim.*## 0.0## ww9))
                                                  (GHC.Prim.*##
                                                     (GHC.Prim.cosDouble# x)
                                                     (GHC.Prim.coshDouble# ww7))))
                                            (GHC.Types.D#
                                               (GHC.Prim.-##
                                                  (GHC.Prim.+##
                                                     (GHC.Prim.*## 3.0## ww9)
                                                     (GHC.Prim.*## 0.0## ww8))
                                                  (GHC.Prim.negateDouble#
                                                     (GHC.Prim.*##
                                                        (GHC.Prim.sinDouble# x)
                                                        (GHC.Prim.sinhDouble# ww7))))) } } })
                                         (GHC.Types.[] @ (Data.Complex.Complex GHC.Types.Double)))))
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                         case ipv7 of wild5 { (,) v' n1 ->
                         case v'
                                `cast`
                              (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                         (GHC.ST.ST
                                                                            GHC.Prim.RealWorld)>_N <Data.Complex.Complex
                                                                                                      GHC.Types.Double>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                         case n1 of dt5 { GHC.Types.I# dt6 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ (Data.Complex.Complex GHC.Types.Double)
                                dt2
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                    <GHC.Prim.RealWorld>_N))_R,
                            Data.Vector.Vector
                              @ (Data.Complex.Complex GHC.Types.Double)
                              dt
                              dt6
                              ipv3 #) } } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
c435317a5a286f69e97da70b12230c8c
  complexes :: [Data.Complex.Complex GHC.Types.Double]
  {- Unfolding: (case PNN.$wmakeComplex
                        @ GHC.Types.Double
                        PNN.complexes1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ (Data.Complex.Complex GHC.Types.Double) ww1 ww2 }) -}
4aceb9df79390cbca99007659ab079ed
  complexes1 :: [GHC.Types.Double]
  {- Unfolding: (Data.Random.Normal.$wnormals'
                   @ System.Random.StdGen
                   @ GHC.Types.Double
                   System.Random.$fRandomGenStdGen
                   System.Random.$fRandomDouble
                   GHC.Float.$fFloatingDouble
                   PNN.complexes3
                   PNN.sd
                   PNN.complexes2) -}
f1b94afc948696dbb1337cb83a5f03c2
  complexes2 :: System.Random.StdGen
  {- Unfolding: (case GHC.Int.$w$cdivMod1
                        231#
                        2147483562# of ww4 { (#,#) ww5 ww6 ->
                 case ww6 of wild { GHC.Int.I32# x# ->
                 case ww5 of ww2 { GHC.Int.I32# ww3 ->
                 case GHC.Classes.modInt# ww3 2147483398# of wild1 { DEFAULT ->
                 System.Random.StdGen
                   (GHC.Prim.narrow32Int# (GHC.Prim.+# x# 1#))
                   (GHC.Prim.narrow32Int#
                      (GHC.Prim.+# (GHC.Prim.narrow32Int# wild1) 1#)) } } } }) -}
010d8d0fefd59f8b8c1b862ba9ca1bfe
  complexes3 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 0.0##) -}
9f96ff6a3e7108df3939bdb7058efeac
  err :: GHC.Types.Double
  {- Unfolding: (case PNN.$wfromVectors
                        @ (Data.Complex.Complex GHC.Types.Double)
                        PNN.err2 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case PNN.$w$snorm1 ww1 ww2 ww3 ww4 ww5 ww6 of ww7 { DEFAULT ->
                 GHC.Types.D# ww7 } }) -}
00fbbc1b5944e9dea8f8fbae53b667b2
  err1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> Data.Complex.Complex GHC.Types.Double
  {- Arity: 2, Strictness: <L,U><L,U>x -}
9ccae30ddc5d2a867cb2b3212515d2c0
  err2 ::
    [Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)]
  {- Unfolding: (PNN.err_go PNN.guesses6 PNN.err3) -}
27423cb8e3b26a1996539cdd946c378e
  err3 ::
    [Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)]
  {- Unfolding: (GHC.List.$wunsafeTake
                   @ (Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                   100#
                   PNN.guesses) -}
834304634137bd59012b4f7cf4c5ea91
  err4 :: Data.Matrix.Matrix a
  {- Strictness: x -}
7bb48dea19a7a90025e3b073aba4e752
  err_go ::
    GHC.Integer.Type.Integer
    -> [Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)]
    -> [Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
55d5848d16ade3c0fbdf50e7be687636
  fromVectors :: [Data.Vector.Vector a] -> Data.Matrix.Matrix a
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: [Data.Vector.Vector a]) ->
                 case PNN.$wfromVectors
                        @ a
                        w of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Data.Matrix.M @ a ww1 ww2 ww3 ww4 ww5 ww6 }) -}
d96cf63bfcfc32c7f295d685e0ce5103
  guesses ::
    [Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)]
  {- Unfolding: (case PNN.$wgo2 PNN.guesses1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                   ww1
                   ww2 }) -}
4dad31a3af11f4cec9c95e3510ed9b5f
  guesses1 ::
    Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
  {- Unfolding: (case PNN.as_$sas
                        PNN.guesses6 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 case PNN.x_res of v1 { Data.Vector.Vector ipv3 ipv4 ipv5 ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         let {
                           x1 :: GHC.Prim.Int# = GHC.Prim.+# ipv1 ipv4
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<# x1 ipv1) of wild4 {
                           GHC.Types.False
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<# x1 ipv4) of wild5 {
                                GHC.Types.False
                                -> case GHC.Prim.newArray#
                                          @ (Data.Complex.Complex GHC.Types.Double)
                                          @ (Control.Monad.Primitive.PrimState
                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                          x1
                                          (Data.Vector.Mutable.uninitialised
                                             @ (Data.Complex.Complex GHC.Types.Double))
                                          s1
                                            `cast`
                                          (GHC.Prim.State#
                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                       <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv6 ipv7 ->
                                   letrec {
                                     $wfoldlM'_loop :: GHC.Types.SPEC
                                                       -> GHC.Prim.Int#
                                                       -> Data.Either.Either
                                                            GHC.Types.Bool GHC.Types.Bool
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Types.Int #)
                                       {- Arity: 4, Strictness: <S,1*U><L,U><S,1*U><S,U>,
                                          Inline: [0] -}
                                     = \ (w :: GHC.Types.SPEC)
                                         (ww :: GHC.Prim.Int#)
                                         (w1 :: Data.Either.Either GHC.Types.Bool GHC.Types.Bool)
                                         (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                       case w of ds5 { DEFAULT ->
                                       case w1 of wild2 {
                                         Data.Either.Left sa
                                         -> case sa of wild {
                                              GHC.Types.False
                                              -> $wfoldlM'_loop GHC.Types.SPEC ww PNN.guesses5 w2
                                              GHC.Types.True
                                              -> case GHC.Prim.copyArray#
                                                        @ (Data.Complex.Complex GHC.Types.Double)
                                                        @ (Control.Monad.Primitive.PrimState
                                                             (GHC.ST.ST GHC.Prim.RealWorld))
                                                        ipv2
                                                        ipv
                                                        ipv7
                                                        ww
                                                        ipv1
                                                        w2
                                                          `cast`
                                                        (GHC.Prim.State#
                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                     <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                                 $wfoldlM'_loop
                                                   GHC.Types.SPEC
                                                   (GHC.Prim.+# ww ipv1)
                                                   PNN.guesses4
                                                   s'#
                                                     `cast`
                                                   (GHC.Prim.State#
                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           <GHC.Prim.RealWorld>_N))_R } }
                                         Data.Either.Right sb
                                         -> case sb of wild {
                                              GHC.Types.False -> (# w2, GHC.Types.I# ww #)
                                              GHC.Types.True
                                              -> case GHC.Prim.copyArray#
                                                        @ (Data.Complex.Complex GHC.Types.Double)
                                                        @ (Control.Monad.Primitive.PrimState
                                                             (GHC.ST.ST GHC.Prim.RealWorld))
                                                        ipv5
                                                        ipv3
                                                        ipv7
                                                        ww
                                                        ipv4
                                                        w2
                                                          `cast`
                                                        (GHC.Prim.State#
                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                     <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                                 $wfoldlM'_loop
                                                   GHC.Types.SPEC
                                                   (GHC.Prim.+# ww ipv4)
                                                   PNN.guesses3
                                                   s'#
                                                     `cast`
                                                   (GHC.Prim.State#
                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           <GHC.Prim.RealWorld>_N))_R } } } }
                                   } in
                                   case $wfoldlM'_loop
                                          GHC.Types.SPEC
                                          0#
                                          PNN.guesses2
                                          ipv6
                                            `cast`
                                          (GHC.Prim.State#
                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv8 ipv9 ->
                                   case ipv9 of dt5 { GHC.Types.I# dt6 ->
                                   case GHC.Prim.unsafeFreezeArray#
                                          @ (Control.Monad.Primitive.PrimState
                                               (GHC.ST.ST GHC.Prim.RealWorld))
                                          @ (Data.Complex.Complex GHC.Types.Double)
                                          ipv7
                                          ipv8
                                            `cast`
                                          (GHC.Prim.State#
                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                       <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv10 ipv11 ->
                                   (# ipv10
                                        `cast`
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N))_R,
                                      Data.Vector.Vector
                                        @ (Data.Complex.Complex GHC.Types.Double)
                                        0#
                                        dt6
                                        ipv11 #) } } } }
                                GHC.Types.True
                                -> case Data.Vector.Fusion.Bundle.Size.$fNumSize2 x1
                                   ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             Data.Vector.Vector
                                               (Data.Complex.Complex GHC.Types.Double) #)
                                   of {} }
                           GHC.Types.True
                           -> case Data.Vector.Fusion.Bundle.Size.$fNumSize2 x1
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.Vector
                                          (Data.Complex.Complex GHC.Types.Double) #)
                              of {} }) of ds1 { (#,#) ipv6 ipv7 ->
                 ipv7 } } }) -}
0c0d327be71dee1bcb36ca7451cbdada
  guesses2 :: Data.Either.Either GHC.Types.Bool GHC.Types.Bool
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Left
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   GHC.Types.True) -}
6c81975e92177b5c36f14e6a96858566
  guesses3 :: Data.Either.Either GHC.Types.Bool GHC.Types.Bool
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   GHC.Types.False) -}
e1b2bc518810f0e7559379a8983dae2e
  guesses4 :: Data.Either.Either GHC.Types.Bool GHC.Types.Bool
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Left
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   GHC.Types.False) -}
d024f43f388ec56e51c6ae05baeaa047
  guesses5 :: Data.Either.Either GHC.Types.Bool GHC.Types.Bool
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   GHC.Types.True) -}
abf5086627f4ed2410e6eb58652b13be
  guesses6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
d3c93ee93eb7a86b132733bb360e8cc8
  k :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3#) -}
85872bae1241f97ad06ea00f26801430
  m :: Data.Matrix.Matrix (Data.Complex.Complex GHC.Types.Double)
61f9605324c6b5e657d7c9d85bc78787
  makeComplex :: [a] -> [Data.Complex.Complex a]
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: [a]) ->
                 case PNN.$wmakeComplex @ a w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ (Data.Complex.Complex a) ww1 ww2 }) -}
dca76e3c3420c03ef8a584428bdd83d9
  mat_a :: Data.Matrix.Matrix (Data.Complex.Complex GHC.Types.Double)
  {- Unfolding: (case PNN.$wfromVectors
                        @ (Data.Complex.Complex GHC.Types.Double)
                        PNN.mat_a1 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Data.Matrix.M
                   @ (Data.Complex.Complex GHC.Types.Double)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
02dd7246cc22575d7c06c5e2ed35492f
  mat_a1 ::
    [Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)]
  {- Unfolding: (PNN.mat_a_go PNN.guesses6 PNN.mat_a2) -}
3133edb33be54af16fae836c49dd5c86
  mat_a2 ::
    [Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)]
  {- Unfolding: (PNN.$wgo3 PNN.mat_a_gen 100#) -}
69722a233999594b99ed7f524e20bff0
  mat_a_gen ::
    [(GHC.Integer.Type.Integer,
      Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))]
  {- Unfolding: (case GHC.List.$witerate
                        @ (GHC.Integer.Type.Integer,
                           Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                        PNN.mat_a_gen2
                        PNN.mat_a_gen1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (GHC.Integer.Type.Integer,
                      Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                   ww1
                   ww2 }) -}
2d083b90dead6a1524c96354fb63149b
  mat_a_gen1 ::
    (GHC.Integer.Type.Integer,
     Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
  {- Unfolding: ((PNN.guesses6, PNN.x_res)) -}
f9dbf60bfdfdb887362ac973056f9337
  mat_a_gen2 ::
    (GHC.Integer.Type.Integer,
     Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
    -> (GHC.Integer.Type.Integer,
        Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
  {- Arity: 1,
     Unfolding: (\ (ds :: (GHC.Integer.Type.Integer,
                           Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))) ->
                 case ds of wild { (,) i x_res' ->
                 (GHC.Integer.Type.plusInteger i PNN.mat_a_gen8,
                  case PNN.as_$sas i of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                  case PNN.$w$s*:
                         97#
                         3#
                         0#
                         0#
                         3#
                         PNN.mat_a_gen5
                         ww1
                         ww2
                         ww3 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                  case x_res' of ww8 { Data.Vector.Vector ww9 ww10 ww11 ->
                  case PNN.$w$s*:
                         97#
                         97#
                         0#
                         0#
                         97#
                         PNN.mat_a_gen3
                         ww9
                         ww10
                         ww11 of ww12 { Data.Vector.Vector ww13 ww14 ww15 ->
                  PNN.$w$s=+= ww5 ww6 ww7 ww13 ww14 ww15 } } } }) }) -}
2f29e7943912e71788e2e8d136a90176
  mat_a_gen3 ::
    Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                        PNN.mat_a_gen4 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
a38f66acd52de008ce6a526aa9f9f114
  mat_a_gen4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double) #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ (Data.Complex.Complex GHC.Types.Double)
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        9409#
                        (Data.Vector.Mutable.uninitialised
                           @ (Data.Complex.Complex GHC.Types.Double))
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   $wfoldlM'_loop :: GHC.Types.SPEC
                                     -> GHC.Prim.Int#
                                     -> [Data.Complex.Complex GHC.Types.Double]
                                     -> GHC.Prim.Int#
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
                     {- Arity: 5, Strictness: <S,1*U><L,U><L,1*U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (w :: GHC.Types.SPEC)
                       (ww :: GHC.Prim.Int#)
                       (ww1 :: [Data.Complex.Complex GHC.Types.Double])
                       (ww2 :: GHC.Prim.Int#)
                       (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case w of ds5 { DEFAULT ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# ww2 0#) of wild1 {
                       GHC.Types.False
                       -> case ww1 of wild2 {
                            [] -> (# w1, GHC.Types.I# ww #)
                            : x xs1
                            -> case GHC.Prim.writeArray#
                                      @ (Control.Monad.Primitive.PrimState
                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                      @ (Data.Complex.Complex GHC.Types.Double)
                                      ipv1
                                      ww
                                      x
                                      w1
                                        `cast`
                                      (GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                   <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                               $wfoldlM'_loop
                                 GHC.Types.SPEC
                                 (GHC.Prim.+# ww 1#)
                                 xs1
                                 (GHC.Prim.-# ww2 1#)
                                 s'#
                                   `cast`
                                 (GHC.Prim.State#
                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                         <GHC.Prim.RealWorld>_N))_R } }
                       GHC.Types.True -> (# w1, GHC.Types.I# ww #) } }
                 } in
                 case $wfoldlM'_loop
                        GHC.Types.SPEC
                        0#
                        PNN.complexes
                        9409#
                        ipv
                          `cast`
                        (GHC.Prim.State#
                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                 case ipv7 of dt5 { GHC.Types.I# dt6 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        @ (Data.Complex.Complex GHC.Types.Double)
                        ipv1
                        ipv6
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2
                      `cast`
                    (GHC.Prim.State#
                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                            <GHC.Prim.RealWorld>_N))_R,
                    Data.Vector.Vector
                      @ (Data.Complex.Complex GHC.Types.Double)
                      0#
                      dt6
                      ipv3 #) } } } }) -}
cdce5f557b1cf6555b803fd3ba053156
  mat_a_gen5 ::
    Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                        PNN.mat_a_gen6 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
4a3ec751cfd2670c6360e7c259f12137
  mat_a_gen6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double) #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ (Data.Complex.Complex GHC.Types.Double)
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        291#
                        (Data.Vector.Mutable.uninitialised
                           @ (Data.Complex.Complex GHC.Types.Double))
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   $wfoldlM'_loop :: GHC.Types.SPEC
                                     -> GHC.Prim.Int#
                                     -> [Data.Complex.Complex GHC.Types.Double]
                                     -> GHC.Prim.Int#
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
                     {- Arity: 5, Strictness: <S,1*U><L,U><L,1*U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (w :: GHC.Types.SPEC)
                       (ww :: GHC.Prim.Int#)
                       (ww1 :: [Data.Complex.Complex GHC.Types.Double])
                       (ww2 :: GHC.Prim.Int#)
                       (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case w of ds5 { DEFAULT ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# ww2 0#) of wild1 {
                       GHC.Types.False
                       -> case ww1 of wild2 {
                            [] -> (# w1, GHC.Types.I# ww #)
                            : x xs1
                            -> case GHC.Prim.writeArray#
                                      @ (Control.Monad.Primitive.PrimState
                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                      @ (Data.Complex.Complex GHC.Types.Double)
                                      ipv1
                                      ww
                                      x
                                      w1
                                        `cast`
                                      (GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                   <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                               $wfoldlM'_loop
                                 GHC.Types.SPEC
                                 (GHC.Prim.+# ww 1#)
                                 xs1
                                 (GHC.Prim.-# ww2 1#)
                                 s'#
                                   `cast`
                                 (GHC.Prim.State#
                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                         <GHC.Prim.RealWorld>_N))_R } }
                       GHC.Types.True -> (# w1, GHC.Types.I# ww #) } }
                 } in
                 case $wfoldlM'_loop
                        GHC.Types.SPEC
                        0#
                        PNN.mat_a_gen7
                        291#
                        ipv
                          `cast`
                        (GHC.Prim.State#
                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                 case ipv7 of dt5 { GHC.Types.I# dt6 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        @ (Data.Complex.Complex GHC.Types.Double)
                        ipv1
                        ipv6
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2
                      `cast`
                    (GHC.Prim.State#
                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                            <GHC.Prim.RealWorld>_N))_R,
                    Data.Vector.Vector
                      @ (Data.Complex.Complex GHC.Types.Double)
                      0#
                      dt6
                      ipv3 #) } } } }) -}
b5f835cca9bde1059b4c23b4a84e2f57
  mat_a_gen7 :: [Data.Complex.Complex GHC.Types.Double]
  {- Unfolding: (PNN.$wunsafeDrop1
                   @ (Data.Complex.Complex GHC.Types.Double)
                   9409#
                   PNN.complexes) -}
45bebae01da8125be4570f2ef3a566fc
  mat_a_gen8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
40bea12c2d5aa517aedacbae0fbc0207
  mat_a_go ::
    GHC.Integer.Type.Integer
    -> [Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)]
    -> [Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
12e8cbefad6a8dcd91a95c2ab2c4ddaa
  n :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100#) -}
1ca602cf72fad0036b20ae3bbc66a5d2
  norm1 ::
    GHC.Float.RealFloat a =>
    Data.Matrix.Matrix (Data.Complex.Complex a) -> a
  {- Arity: 2,
     Strictness: <L,U(U(U(U(U,U,U,U,U,U,U),U,U),U,U,U,U,U,U),U(A,A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A,A,C(U(U)),A,C(C1(U)),A,A,A,A,A,A)><S(LSLLLL),1*U(U,U,U,U,U,U(U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Float.RealFloat a)
                   (w1 :: Data.Matrix.Matrix (Data.Complex.Complex a)) ->
                 case w1 of ww { Data.Matrix.M ww1 ww2 ww3 ww4 ww5 ww6 ->
                 PNN.$wnorm1 @ a w ww1 ww2 ww3 ww4 ww5 ww6 }) -}
2cd21e3dae080a1cefaa36ea87d6dfc1
  norm2 :: a
  {- Strictness: x -}
21fe68b89ecd4e62677640f140522633
  norm3 :: GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Complex.Complex a
  {- Arity: 2, Strictness: <L,U><L,U>x -}
cc3282cf91351e413abc0579a39d64da
  s :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 2.1##) -}
40dcfccb116ed80d1c6cdc6a1c7f5bc0
  sd :: GHC.Types.Double
  {- Unfolding: (case GHC.Prim./##
                        1.0##
                        (GHC.Prim.sqrtDouble# 210.0##) of wild2 { DEFAULT ->
                 GHC.Types.D# wild2 }) -}
2c80007ffbd547d7d75197e52263e4ce
  seed :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 231#) -}
53c6bd9a18d338d183cc49a7b3e691e0
  solve ::
    (GHC.Real.Fractional b, GHC.Classes.Eq b) => [[b]] -> [[b]]
  {- Arity: 3,
     Strictness: <L,U(U,C(C1(U)),A,A)><L,U(C(U),A)><S,1*U> -}
12a38477ac75bafaa77bb31928f9e59f
  solve_backsub' ::
    [[Data.Complex.Complex GHC.Types.Double]]
    -> [[Data.Complex.Complex GHC.Types.Double]]
    -> [[Data.Complex.Complex GHC.Types.Double]]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
d151a994184370db4d7eae5ccaa68ff3
  solve_triangular ::
    [[Data.Complex.Complex GHC.Types.Double]]
    -> [[Data.Complex.Complex GHC.Types.Double]]
  {- Arity: 1, Strictness: <S,1*U> -}
93c56c52d0da30923b4260a3b675d665
  someFunc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                PNN.someFunc1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ff09e0c632d3dd83f0414f31f997b0fd
  someFunc1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        PNN.someFunc3
                        GHC.Types.True
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   PNN.someFunc2
                   GHC.Types.True
                   ipv }) -}
d2c325c20d6c5604ebe03374867a73e2
  someFunc10 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.someFunc22
                   PNN.someFunc11) -}
f22559780fd60f752ebf193380b1515b
  someFunc11 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.someFunc21
                   PNN.someFunc12) -}
2e75523b00ff6bfed7cb427297f22592
  someFunc12 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.complexes3
                   PNN.someFunc13) -}
97a4cf055023a37a9b832a88965e2d7a
  someFunc13 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.someFunc20
                   PNN.someFunc14) -}
60db183d4d77b95e9fa7c55c26f5feef
  someFunc14 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.someFunc19
                   PNN.someFunc15) -}
db548d645075f6f46ea4440111ca219f
  someFunc15 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.someFunc18
                   PNN.someFunc16) -}
ce7c8111f142be755e49c40421b331ab
  someFunc16 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.someFunc17
                   (GHC.Types.[] @ GHC.Types.Double)) -}
c0456d295f24c91aff8447c916d19e77
  someFunc17 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 7.0##) -}
91418ad60698602ab8edc9463bf95d6a
  someFunc18 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 2.0##) -}
c9fa21a02f7ae44c5fad47339375f898
  someFunc19 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 5.0##) -}
f19745f68332adff64959c81119564ff
  someFunc2 :: GHC.Base.String
9bd6fe2015fa97f9c7ce8703cf2ce945
  someFunc20 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 1.0##) -}
1f993d0a4f958836a8869fe45388f431
  someFunc21 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 9.0##) -}
a410bcdc9b2f0d9742c0bd30338587e2
  someFunc22 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 3.0##) -}
cec09aab3ad3746c4b1d201d05f73f9a
  someFunc23 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 8.0##) -}
a45060c914474e12b54743d9b8554bdd
  someFunc24 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 6.0##) -}
36be463747b4a0b20355c1ec93576aed
  someFunc3 :: GHC.Base.String
  {- Unfolding: (case PNN.someFunc_ra of ww { Data.Matrix.M ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Data.Matrix.$wgetDiag
                        @ GHC.Types.Double
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 letrec {
                   $wgo4 :: GHC.Prim.Int# -> [GHC.Types.Double]
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (ww7 :: GHC.Prim.Int#) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww7 ipv1) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ GHC.Types.Double
                                 ipv2
                                 (GHC.Prim.+# ipv ww7) of ds1 { Unit# ipv3 ->
                          GHC.Types.: @ GHC.Types.Double ipv3 ($wgo4 (GHC.Prim.+# ww7 1#)) }
                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Double }
                 } in
                 case $wgo4 0# of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        "[]"#
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__2
                        (case x of ww7 { GHC.Types.D# ww8 ->
                         GHC.Float.$w$sshowSignedFloat
                           GHC.Float.$fShowDouble_$sshowFloat
                           GHC.Float.minExpt
                           ww8
                           (let {
                              lvl81 :: [GHC.Types.Char]
                              = GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__1
                                  (GHC.Types.[] @ GHC.Types.Char)
                            } in
                            letrec {
                              showl :: [GHC.Types.Double] -> GHC.Base.String
                                {- Arity: 1, Strictness: <S,1*U> -}
                              = \ (ds2 :: [GHC.Types.Double]) ->
                                case ds2 of wild1 {
                                  [] -> lvl81
                                  : y ys
                                  -> GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.shows5
                                       (case y of ww9 { GHC.Types.D# ww10 ->
                                        GHC.Float.$w$sshowSignedFloat
                                          GHC.Float.$fShowDouble_$sshowFloat
                                          GHC.Float.minExpt
                                          ww10
                                          (showl ys) }) }
                            } in
                            showl xs) }) } } }) -}
bf45ce47c2560a6e19068f177ee6121f
  someFunc4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector GHC.Types.Double #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ GHC.Types.Double
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        12#
                        (Data.Vector.Mutable.uninitialised @ GHC.Types.Double)
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   $wfoldlM'_loop :: GHC.Types.SPEC
                                     -> GHC.Prim.Int#
                                     -> [GHC.Types.Double]
                                     -> GHC.Prim.Int#
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
                     {- Arity: 5, Strictness: <S,1*U><L,U><L,1*U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (w :: GHC.Types.SPEC)
                       (ww :: GHC.Prim.Int#)
                       (ww1 :: [GHC.Types.Double])
                       (ww2 :: GHC.Prim.Int#)
                       (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case w of ds5 { DEFAULT ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# ww2 0#) of wild1 {
                       GHC.Types.False
                       -> case ww1 of wild2 {
                            [] -> (# w1, GHC.Types.I# ww #)
                            : x xs1
                            -> case GHC.Prim.writeArray#
                                      @ (Control.Monad.Primitive.PrimState
                                           (GHC.ST.ST GHC.Prim.RealWorld))
                                      @ GHC.Types.Double
                                      ipv1
                                      ww
                                      x
                                      w1
                                        `cast`
                                      (GHC.Prim.State#
                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                   <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                               $wfoldlM'_loop
                                 GHC.Types.SPEC
                                 (GHC.Prim.+# ww 1#)
                                 xs1
                                 (GHC.Prim.-# ww2 1#)
                                 s'#
                                   `cast`
                                 (GHC.Prim.State#
                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                         <GHC.Prim.RealWorld>_N))_R } }
                       GHC.Types.True -> (# w1, GHC.Types.I# ww #) } }
                 } in
                 case $wfoldlM'_loop
                        GHC.Types.SPEC
                        0#
                        PNN.someFunc5
                        12#
                        ipv
                          `cast`
                        (GHC.Prim.State#
                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                 case ipv7 of dt5 { GHC.Types.I# dt6 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        @ GHC.Types.Double
                        ipv1
                        ipv6
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2
                      `cast`
                    (GHC.Prim.State#
                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                            <GHC.Prim.RealWorld>_N))_R,
                    Data.Vector.Vector @ GHC.Types.Double 0# dt6 ipv3 #) } } } }) -}
265a94b020022ddaebddc89e67e66d16
  someFunc5 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.someFunc20
                   PNN.someFunc6) -}
024c552d3d7f9306b075a2e5747ede21
  someFunc6 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.someFunc24
                   PNN.someFunc7) -}
1e62d9a2a81cab19fee385f843ca3bd1
  someFunc7 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.someFunc18
                   PNN.someFunc8) -}
453d546218a80c45bd5b979869ab8480
  someFunc8 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.someFunc23
                   PNN.someFunc9) -}
c07cea77ef747033308f09cb8843d690
  someFunc9 :: [GHC.Types.Double]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   PNN.someFunc21
                   PNN.someFunc10) -}
6058e70500d10625446b9aac1dc6c433
  someFunc_ra :: Data.Matrix.Matrix GHC.Types.Double
  {- Unfolding: (case Data.Matrix.$wrref
                        @ GHC.Types.Double
                        GHC.Float.$fFractionalDouble
                        GHC.Classes.$fEqDouble
                        3#
                        4#
                        0#
                        0#
                        4#
                        PNN.someFunc_ww6 of wild {
                   Data.Either.Left ipv
                   -> case Control.Exception.Base.irrefutPatError
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.Matrix.Matrix GHC.Types.Double)
                             "src/PNN.hs:87:8-24|Right ra"#
                      ret_ty (Data.Matrix.Matrix GHC.Types.Double)
                      of {}
                   Data.Either.Right ra -> ra }) -}
d5cb34b28614947629fda442b7cdf348
  someFunc_ww6 :: Data.Vector.Vector GHC.Types.Double
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector GHC.Types.Double)
                        PNN.someFunc4 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
33616e26108944e4a8d764538fc55a29
  w_in :: Data.Matrix.Matrix (Data.Complex.Complex GHC.Types.Double)
  {- Strictness: m,
     Unfolding: (Data.Matrix.M
                   @ (Data.Complex.Complex GHC.Types.Double)
                   97#
                   3#
                   0#
                   0#
                   3#
                   PNN.mat_a_gen5) -}
a5c4c69559b75616f35618b6684f3b0d
  w_out :: Data.Matrix.Matrix (Data.Complex.Complex GHC.Types.Double)
47d626d5995e63271b489a847268f873
  w_res :: Data.Matrix.Matrix (Data.Complex.Complex GHC.Types.Double)
  {- Strictness: m,
     Unfolding: (Data.Matrix.M
                   @ (Data.Complex.Complex GHC.Types.Double)
                   97#
                   97#
                   0#
                   0#
                   97#
                   PNN.mat_a_gen3) -}
a46818ed14c9800a4d2dd4a26a982819
  x_res :: Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double)
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double))
                        PNN.x_res1 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
5bd1d4602f59371eb12ec007711bec9f
  x_res1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector (Data.Complex.Complex GHC.Types.Double) #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ (Data.Complex.Complex GHC.Types.Double)
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        0#
                        (Data.Vector.Mutable.uninitialised
                           @ (Data.Complex.Complex GHC.Types.Double))
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                 case PNN.x_res4
                        GHC.Types.SPEC
                        ((Data.Vector.Mutable.MVector
                            @ (Control.Monad.Primitive.PrimState
                                 (GHC.ST.ST GHC.Prim.RealWorld))
                            @ (Data.Complex.Complex GHC.Types.Double)
                            0#
                            0#
                            ipv1)
                           `cast`
                         (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld)>_N <Data.Complex.Complex
                                                                                                       GHC.Types.Double>_N),
                         PNN.=+=1)
                        PNN.x_res2
                        ipv
                          `cast`
                        (GHC.Prim.State#
                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                 case ipv7 of wild5 { (,) v' n1 ->
                 case v'
                        `cast`
                      (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                 (GHC.ST.ST
                                                                    GHC.Prim.RealWorld)>_N <Data.Complex.Complex
                                                                                              GHC.Types.Double>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                 case n1 of dt5 { GHC.Types.I# dt6 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        @ (Data.Complex.Complex GHC.Types.Double)
                        dt2
                        ipv6
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2
                      `cast`
                    (GHC.Prim.State#
                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                            <GHC.Prim.RealWorld>_N))_R,
                    Data.Vector.Vector
                      @ (Data.Complex.Complex GHC.Types.Double)
                      dt
                      dt6
                      ipv3 #) } } } } } }) -}
05395cecf3b7a367721c81f2bed2a1d5
  x_res2 :: [Data.Complex.Complex GHC.Types.Double]
  {- Unfolding: (GHC.List.$wunsafeTake
                   @ (Data.Complex.Complex GHC.Types.Double)
                   97#
                   PNN.x_res3) -}
15698b19024236f0bd8cdea25c0bc939
  x_res3 :: [Data.Complex.Complex GHC.Types.Double]
  {- Unfolding: (PNN.$wunsafeDrop
                   @ (Data.Complex.Complex GHC.Types.Double)
                   9700#
                   PNN.complexes) -}
d27305b57f1cadcfb2410ceb1de6feb9
  x_res4 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
          (Data.Complex.Complex GHC.Types.Double),
        GHC.Types.Int)
    -> [Data.Complex.Complex GHC.Types.Double]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             (Data.Complex.Complex GHC.Types.Double),
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><S,U> -}
"SPEC *: @ (Complex Double)" [ALWAYS] forall ($dNum :: GHC.Num.Num
                                                         (Data.Complex.Complex GHC.Types.Double))
  PNN.*: @ (Data.Complex.Complex GHC.Types.Double) $dNum
  = PNN.*:_$s*:
"SPEC as @ (Complex Double) @ Int" [ALWAYS] forall ($dFloating :: GHC.Float.Floating
                                                                    (Data.Complex.Complex
                                                                       GHC.Types.Double))
                                                   ($dIntegral :: GHC.Real.Integral GHC.Types.Int)
  PNN.as @ (Data.Complex.Complex GHC.Types.Double)
         @ GHC.Types.Int
         $dIntegral
         $dFloating
  = PNN.as_$sas1
"SPEC as @ (Complex Double) @ Integer" [ALWAYS] forall ($dFloating :: GHC.Float.Floating
                                                                        (Data.Complex.Complex
                                                                           GHC.Types.Double))
                                                       ($dIntegral :: GHC.Real.Integral
                                                                        GHC.Integer.Type.Integer)
  PNN.as @ (Data.Complex.Complex GHC.Types.Double)
         @ GHC.Integer.Type.Integer
         $dIntegral
         $dFloating
  = PNN.as_$sas
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

